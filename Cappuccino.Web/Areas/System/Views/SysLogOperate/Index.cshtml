
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutIndex.cshtml";
}

<div class="layui-card">
    <div class="layui-card-body">
        <form class="layui-form" action="">
            <div class="layui-form-item">
                <div class="layui-form-item layui-inline">
                    <label class="layui-form-label">账户</label>
                    <div class="layui-input-inline">
                        <input type="text" name="account" placeholder="请输入账户" class="layui-input">
                    </div>
                </div>
                <div class="layui-form-item layui-inline">
                    <label class="layui-form-label">姓名</label>
                    <div class="layui-input-inline">
                        <input type="text" name="realName" placeholder="请输入姓名" class="layui-input">
                    </div>
                </div>
                <div class="layui-form-item layui-inline">
                    <label class="layui-form-label">日期范围</label>
                    <div class="layui-input-inline">
                        <input class="layui-input" placeholder="日期范围" autocomplete="off" name="startEndDate" id="startEndDate">
                    </div>
                </div>
                <div class="layui-form-item layui-inline">
                    @Html.SearchBtnHtml()
                    @Html.ResetBtnHtml()
                </div>
            </div>
        </form>
    </div>
</div>
<div class="layui-card">
    <div class="layui-card-body">
        <table id="tableId" lay-filter="tableFilter"></table>
    </div>
</div>
@section Scripts {

    <!-- 头工具栏模板 -->
    <script type="text/html" id="toolbarTpl">
        @Html.TopToolBarHtml(ViewData["TopButtonList"])
    </script>

    <script>
        layui.use(['table', 'form', 'laydate'], function () {
            let table = layui.table;
            let form = layui.form;
            let laydate = layui.laydate;

            let MODULE_PATH = "/System/SysLogOperate/";

            laydate.render({
                elem: '#startEndDate'
                , range: '~'
            });

            table.render({
                elem: '#tableId',
                url: MODULE_PATH + "GetList",
                page: true,
                limit: 10,
                cols: [
                    [
                        { type: 'checkbox' },
                        { title: 'ID', field: 'id', hide: true },
                        { title: '操作模块', field: 'title', align: 'center' },
                        {
                            title: '操作类型', field: 'businessType', align: 'center', templet: function (d) {
                                return top.getDataDictValue("sys_operate_type", d.businessType);
                            }
                        },
                        { title: '请求方式', field: 'requestMethod', align: 'center' },
                        { title: '请求地址', field: 'requestUrl', align: 'center' },
                        { title: '请求参数', field: 'requestParam', align: 'center' },
                        {
                            title: '执行状态', field: 'logStatus', align: 'center', templet: function (d) {
                                return top.getDataDictValue("sys_success_status", d.logStatus);
                            }
                        },
                        { title: '请求结果', field: 'requestResult', align: 'center' },
                        { title: 'IP地址', field: 'ipAddress', align: 'center' },
                        { title: 'IP所在城市', field: 'ipAddressName', align: 'center' },
                        { title: '创建时间', field: 'createTime', align: 'center', sort: true }
                    ]
                ],
                skin: 'line',
                toolbar: '#toolbarTpl',
                defaultToolbar: [{
                    layEvent: 'refresh',
                    icon: 'layui-icon-refresh',
                }, 'filter', 'print', 'exports']
            });

            table.on('toolbar(tableFilter)', function (obj) {
                if (obj.event === 'refresh') {
                    window.refresh();
                }
            });

            table.on('sort(tableFilter)', function (obj) {
                //console.log(obj.field); //当前排序的字段名
                //console.log(obj.type); //当前排序类型：desc（降序）、asc（升序）、null（空对象，默认排序）
                //console.log(this); //当前排序的 th 对象

                table.reload('tableId', {
                    initSort: obj //记录初始排序
                    , where: {
                        field: obj.field,
                        order: obj.type
                    }
                });
            });

            form.on('submit(search)', function (data) {
                table.reload('tableId', { where: data.field })
                return false;
            });

            window.refresh = function () {
                table.reload('tableId');
            }
        })
    </script>

}
